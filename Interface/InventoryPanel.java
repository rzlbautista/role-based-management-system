/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interface;

import Interface.db;
import java.sql.ResultSet;
import java.math.BigDecimal;
import java.security.Timestamp;
import javax.swing.JOptionPane;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.regex.Pattern;
import java.util.regex.*;
import java.util.regex.Matcher;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.nio.charset.StandardCharsets;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.*;
import javax.swing.table.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.Attributes.Name;


/**

/**
 *
 * @author Renniel
 */
public class InventoryPanel extends javax.swing.JPanel {
    JpanelLoader jpload = new JpanelLoader();

    /**
     * Creates new form InventoryPanel
     */
    public InventoryPanel() {
        initComponents();
          tb_load();
    }
private void tb_load() {
        // Define the table model with a checkbox (Boolean) column in the first position
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Select", "Product Name", "Price", "Current Stock", "Supplier Name", "Supplier Email", "Last Updated"}, 0) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                // Set the first column as Boolean for checkboxes
                if (columnIndex == 0) {
                    return Boolean.class;
                }
                return super.getColumnClass(columnIndex);
            }
        };
        
        // Set the model to the table
        stocktable.setModel(model);
        model.setRowCount(0);  // Clear any existing rows

        try {
            java.sql.Connection con = db.mycon();
            String query = "SELECT p.Product_Name, p.Price, st.Current_Stock, s.Supplier_Name, s.Email, st.Last_Updated " +
                           "FROM stock_table st " +
                           "JOIN product_table p ON st.Product_ID = p.Product_ID " +
                           "JOIN supplier_table s ON st.Supplier_ID = s.Supplier_ID";

            java.sql.PreparedStatement stmt = con.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Loop through the result set and add rows to the table model
            while (rs.next()) {
                String productName = rs.getString("Product_Name");
                BigDecimal price = rs.getBigDecimal("Price");
                int currentStock = rs.getInt("Current_Stock");
                String supplierName = rs.getString("Supplier_Name");
                String supplierEmail = rs.getString("Email");
                java.sql.Timestamp lastUpdated = rs.getTimestamp("Last_Updated");

                // Add a new row with a checkbox in the first column
                model.addRow(new Object[]{false, productName, price, currentStock, supplierName, supplierEmail, lastUpdated});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading data: " + e.getMessage());
        }
    }

    public class LoggedInUser {
    private static int employeeId;
    private static String fullName;

    // Setters and Getters
    public static void setEmployeeId(int id) {
        employeeId = id;
    }

    public static int getEmployeeId() {
        return employeeId;
    }

    public static void setFullName(String name) {
        fullName = name;
    }

    public static String getFullName() {
        return fullName;
    }
    
    
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        inventoryaccount_panel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        p_name = new javax.swing.JTextField();
        p_price = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        p_quantity = new javax.swing.JTextField();
        s_name = new javax.swing.JTextField();
        s_emailadd = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        stocktable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        inventorysearch = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        filterdate = new com.toedter.calendar.JDateChooser();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        jPanel1.setPreferredSize(new java.awt.Dimension(1290, 800));

        inventoryaccount_panel.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(1290, 223));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 102));
        jLabel1.setText("Product Name:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 102));
        jLabel2.setText("Price:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 102));
        jLabel3.setText("Quantity:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 102));
        jLabel4.setText("Supplier Name:");

        p_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_nameActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 102));
        jLabel5.setText("Supplier Email Address:");

        jButton1.setBackground(new java.awt.Color(238, 238, 248));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 51, 102));
        jButton1.setText("EDIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(238, 238, 248));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 51, 102));
        jButton2.setText("ADD");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(p_price)
                    .addComponent(p_quantity, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .addComponent(s_name)
                    .addComponent(s_emailadd)
                    .addComponent(p_name))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(48, 48, 48))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(p_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(p_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(p_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(s_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(s_emailadd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        stocktable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product Name", "Price", "Quantity", "Supplier Name", "Supplier Email Address", "Last Updated"
            }
        ));
        stocktable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stocktableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(stocktable);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 102));
        jLabel6.setText("SEARCH");

        inventorysearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventorysearchActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 102));
        jLabel7.setText("FILTER");

        filterdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterdateMouseClicked(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product Name", "Price", "Current Stock", "Supplier Name", "Email", "Last Update", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 102));
        jLabel10.setText("SEARCH BY");

        jButton4.setBackground(new java.awt.Color(238, 238, 248));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGE/search 25 x 25.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(inventorysearch, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(filterdate, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(inventorysearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addComponent(filterdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addComponent(jButton4))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout inventoryaccount_panelLayout = new javax.swing.GroupLayout(inventoryaccount_panel);
        inventoryaccount_panel.setLayout(inventoryaccount_panelLayout);
        inventoryaccount_panelLayout.setHorizontalGroup(
            inventoryaccount_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inventoryaccount_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(inventoryaccount_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(inventoryaccount_panelLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addGap(11, 11, 11))
        );
        inventoryaccount_panelLayout.setVerticalGroup(
            inventoryaccount_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryaccount_panelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(inventoryaccount_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(inventoryaccount_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inventoryaccount_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void p_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_p_nameActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
                
         
         

String pname = p_name.getText();
String pprice = p_price.getText();
String pqty = p_quantity.getText();
String sname = s_name.getText();
String seadd = s_emailadd.getText();


try {
    // Check if required fields are empty
    if (pname == null || pname.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Product name cannot be empty.");
        return;
    }
    if (pprice == null || pprice.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Price cannot be empty.");
        return;
    }
    if (pqty == null || pqty.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Quantity cannot be empty.");
        return;
    }
    if (sname == null || sname.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Supplier name cannot be empty.");
        return;
    }

    // Validate email format
    if (seadd == null || seadd.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Email address cannot be empty.");
        return;
    }

    String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
    Pattern emailPattern = Pattern.compile(emailRegex);
    Matcher matcher = emailPattern.matcher(seadd);

    if (!matcher.matches()) {
        JOptionPane.showMessageDialog(null, "Invalid email format. Please enter a valid email address.");
        return;
    }

    // Validate that Price and Quantity are numbers
    try {
        Double.parseDouble(pprice); // Check if the price is a valid number
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Price must be a valid number.");
        return;
    }

    try {
        Integer.parseInt(pqty); // Check if the quantity is a valid integer
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Quantity must be a valid integer.");
        return;
    }

    // Initialize connection
    java.sql.Connection con = db.mycon();
    con.setAutoCommit(false);

    // Check if the product name already exists in product_table
    String checkProductSql = "SELECT Product_ID FROM product_table WHERE Product_Name = ?";
    java.sql.PreparedStatement checkProductStmt = con.prepareStatement(checkProductSql);
    checkProductStmt.setString(1, pname);
    java.sql.ResultSet productExistsResult = checkProductStmt.executeQuery();

    if (productExistsResult.next()) {
        JOptionPane.showMessageDialog(null, "This product already exists.");
        return;  // Exit the method if the product already exists
    }

    // Insert product data into product_table
    String productSql = "INSERT INTO product_table (Product_Name, Price) VALUES (?, ?)";
    java.sql.PreparedStatement productStmt = con.prepareStatement(productSql, java.sql.Statement.RETURN_GENERATED_KEYS);
    productStmt.setString(1, pname);
    productStmt.setBigDecimal(2, new BigDecimal(pprice));
    productStmt.executeUpdate();

    // Retrieve the generated Product_ID
    java.sql.ResultSet productKeys = productStmt.getGeneratedKeys();
    int productId = 0;
    if (productKeys.next()) {
        productId = productKeys.getInt(1);  // Get the generated Product_ID
    }

    // Insert supplier data or get existing supplier ID if it already exists
    String supplierSql = "INSERT INTO supplier_table (Supplier_Name, Email) VALUES (?, ?) " +
                         "ON DUPLICATE KEY UPDATE Supplier_ID=LAST_INSERT_ID(Supplier_ID)";
    java.sql.PreparedStatement supplierStmt = con.prepareStatement(supplierSql, java.sql.Statement.RETURN_GENERATED_KEYS);
    supplierStmt.setString(1, sname);
    supplierStmt.setString(2, seadd);
    supplierStmt.executeUpdate();

    // Retrieve the Supplier_ID, even if it was a duplicate
    java.sql.ResultSet supplierKeys = supplierStmt.getGeneratedKeys();
    int supplierId = 0;
    if (supplierKeys.next()) {
        supplierId = supplierKeys.getInt(1);  // Get the Supplier_ID
    }

    // Insert stock data into stock_table using product_id and supplier_id
    String stockSql = "INSERT INTO stock_table (Product_ID, Supplier_ID, Current_Stock) VALUES (?, ?, ?)";
    java.sql.PreparedStatement stockStmt = con.prepareStatement(stockSql);
    stockStmt.setInt(1, productId);   // Set the Product_ID from product_table
    stockStmt.setInt(2, supplierId);  // Set the Supplier_ID from supplier_table
    stockStmt.setInt(3, Integer.parseInt(pqty));  // Set the stock quantity
    stockStmt.executeUpdate();

    // Commit the transaction
    con.commit();

    JOptionPane.showMessageDialog(null, "Product and Supplier Data Saved");

} catch (java.sql.SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error saving data: " + e.getMessage());
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Quantity and Price must be valid numbers.");
} finally {
    tb_load();  
}

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                                              
                                          
    // TODO add your handling code here:
    DefaultTableModel tblModel = (DefaultTableModel) stocktable.getModel();
    
    // Check if exactly one row is selected
    int selectedRow = stocktable.getSelectedRow();
    if (selectedRow == -1) {
        if (stocktable.getRowCount() == 0) {
            // If table is empty
            JOptionPane.showMessageDialog(this, "Table is empty.");
        } else {
            // If no row is selected
            JOptionPane.showMessageDialog(this, "Please select a row for update.");
        }
    } else {
        // Retrieve values from text fields
        String ProductName = p_name.getText();
        String ProductPrice = p_price.getText();
        String CurrentStock = p_quantity.getText();
        String SupplierName = s_name.getText();
        String SupplierEmail = s_emailadd.getText();
        
        // Optional: Validate if all fields are filled in (if needed)
        if (ProductName.isEmpty() || ProductPrice.isEmpty() || CurrentStock.isEmpty() || SupplierName.isEmpty() || SupplierEmail.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields before updating.");
        } else {
            // Update the table with new values
            tblModel.setValueAt(ProductName, selectedRow, 1); // Corrected column index
            tblModel.setValueAt(ProductPrice, selectedRow, 2); // Corrected column index
            tblModel.setValueAt(CurrentStock, selectedRow, 3); // Corrected column index
            tblModel.setValueAt(SupplierName, selectedRow, 4); // Corrected column index
            tblModel.setValueAt(SupplierEmail, selectedRow, 5); // Corrected column index
            
            // Display success message
            JOptionPane.showMessageDialog(this, "Update Successful.");
        }
    }
               

    }//GEN-LAST:event_jButton1ActionPerformed

    private void filterdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterdateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_filterdateMouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel) stocktable.getModel();
        if(stocktable.getSelectedRowCount()==1 ){
            
            String ProductName = p_name.getText();
            String ProductPrice = p_price.getText();
            String CurrentStock = p_quantity.getText();
            String SupplierName = s_name.getText();
            String SupplierEmail = s_emailadd.getText();
            
            //set update value on table row
            tblModel.setValueAt(ProductName, stocktable.getSelectedRow(), 0);
            tblModel.setValueAt(ProductPrice, stocktable.getSelectedRow(), 1);
            tblModel.setValueAt(CurrentStock, stocktable.getSelectedRow(), 2);
            tblModel.setValueAt(SupplierName, stocktable.getSelectedRow(), 3);
            tblModel.setValueAt(SupplierEmail, stocktable.getSelectedRow(), 4);
            
            //update message display
            JOptionPane.showMessageDialog(this," Update Succesfully..");
            
}else{
            if(stocktable.getRowCount()==0 ){
                //if table is empty
                JOptionPane.showMessageDialog(this, "Table is Empty..");
}else{
                //if row is not 
                JOptionPane.showMessageDialog(this, "Please select row for update..");
            }
        }
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
      // Get the selected date from the date picker
Date selectedDate = filterdate.getDate(); // JDateChooser for the single date

// Validate the date
if (selectedDate == null) {
    JOptionPane.showMessageDialog(this, "Please select a date!");
    return;
}

// Convert the selected date to start and end of the day using Calendar
 Calendar calendar = Calendar.getInstance();
calendar.setTime(selectedDate);

// Start of the day (00:00:00)
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
java.sql.Timestamp sqlStartDate = new java.sql.Timestamp(calendar.getTimeInMillis());

// End of the day (23:59:59)
calendar.set(Calendar.HOUR_OF_DAY, 23);
calendar.set(Calendar.MINUTE, 59);
calendar.set(Calendar.SECOND, 59);
calendar.set(Calendar.MILLISECOND, 999);
java.sql.Timestamp sqlEndDate = new java.sql.Timestamp(calendar.getTimeInMillis());

// SQL query for filtering by a specific date
String query = "SELECT st.stock_id, pt.product_name, pt.price, st.current_stock, "
             + "sup.supplier_name, sup.email, st.last_updated "
             + "FROM stock_table st "
             + "JOIN product_table pt ON st.product_id = pt.product_id "
             + "JOIN supplier_table sup ON st.supplier_id = sup.supplier_id "
             + "WHERE st.last_updated BETWEEN ? AND ?";

try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/inventory", "root", "");
     PreparedStatement stmt = conn.prepareStatement(query)) {

    // Set the date parameters in the query using Timestamps
    stmt.setTimestamp(1, sqlStartDate);
    stmt.setTimestamp(2, sqlEndDate);

    // Execute the query and process results
    ResultSet rs = stmt.executeQuery();

    // Get the table model and clear previous rows
    DefaultTableModel model = (DefaultTableModel) stocktable.getModel();
    model.setRowCount(0); // Clear existing data

    // Populate table with results
    while (rs.next()) {
        model.addRow(new Object[]{
            false, // Checkbox (unchecked)
            rs.getString("product_name"),
            rs.getString("price"),
            rs.getString("current_stock"),
            rs.getString("supplier_name"),
            rs.getString("email"),
            rs.getTimestamp("last_updated") // Display last_updated as Timestamp
        });
    }

    // If no results are found, show a message
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No results found!");
    }

} catch (SQLException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
}

    }//GEN-LAST:event_jButton4ActionPerformed

    private void inventorysearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventorysearchActionPerformed
        // TODO add your handling code here:
           
   
    String searchQuery = inventorysearch.getText().trim();

    // Get the selected column from the JComboBox
    String searchByDisplayName = jComboBox1.getSelectedItem().toString();

    // Map displayed names to actual column names
    Map<String, String> columnMap = new HashMap<>();
    columnMap.put("Product Name", "pt.product_name");
    columnMap.put("Price", "pt.price");
    columnMap.put("Current Stock", "st.current_stock");
    columnMap.put("Supplier Name", "sup.supplier_name");
    columnMap.put("Email", "sup.email");

    // Get the actual column name
    String searchBy = columnMap.get(searchByDisplayName);

    // Check if the search term or column is invalid
    if (searchQuery.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Enter a search term!");
        return;
    }
    if (searchBy == null) {
        JOptionPane.showMessageDialog(this, "Invalid search field selected!");
        return;
    }

    // SQL Query with Joins
    String query = "SELECT st.stock_id, pt.product_name, pt.price, st.current_stock, "
                 + "sup.supplier_name, sup.email, st.last_updated "
                 + "FROM stock_table st "
                 + "JOIN product_table pt ON st.product_id = pt.product_id "
                 + "JOIN supplier_table sup ON st.supplier_id = sup.supplier_id "
                 + "WHERE " + searchBy + " LIKE ?";

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/inventory", "root", "");
         PreparedStatement stmt = conn.prepareStatement(query)) {

        // Set the search parameter
        stmt.setString(1, "%" + searchQuery + "%");

        // Execute the query and process results
        ResultSet rs = stmt.executeQuery();

        // Get the table model and clear previous rows
        DefaultTableModel model = (DefaultTableModel) stocktable.getModel();
        model.setRowCount(0); // Clear existing data

        // Populate table with results
        while (rs.next()) {
            model.addRow(new Object[]{
                false, // Checkbox (unchecked)
                rs.getString("product_name"),
                rs.getString("price"),
                rs.getString("current_stock"),
                rs.getString("supplier_name"),
                rs.getString("email"),
                rs.getString("last_updated")
            });
        }

        // If no results are found, show a message
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No results found!");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_inventorysearchActionPerformed

    private void stocktableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stocktableMouseClicked
        // TODO add your handling code here:                            
 
    // Get the selected row index
    DefaultTableModel tblModel = (DefaultTableModel) stocktable.getModel();
    
    // Ensure that the user has selected a row
    int selectedRow = stocktable.getSelectedRow();
    
   
        // Retrieve values from the selected row
        String ProductName = tblModel.getValueAt(selectedRow, 1).toString(); // Column 1: Product Name
        String ProductPrice = tblModel.getValueAt(selectedRow, 2).toString(); // Column 2: Product Price
        String CurrentStock = tblModel.getValueAt(selectedRow, 3).toString(); // Column 3: Current Stock
        String SupplierName = tblModel.getValueAt(selectedRow, 4).toString(); // Column 4: Supplier Name
        String SupplierEmail = tblModel.getValueAt(selectedRow, 5).toString(); // Column 5: Supplier Email
        
        // Set the text of the respective text fields with the retrieved data
        p_name.setText(ProductName);        // Set Product Name to p_name text field
        p_price.setText(ProductPrice);      // Set Product Price to p_price text field
        p_quantity.setText(CurrentStock);   // Set Current Stock to p_quantity text field
        s_name.setText(SupplierName);       // Set Supplier Name to s_name text field
        s_emailadd.setText(SupplierEmail);  // Set Supplier Email to s_emailadd text field
    

    



    }//GEN-LAST:event_stocktableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser filterdate;
    private javax.swing.JPanel inventoryaccount_panel;
    private javax.swing.JTextField inventorysearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField p_name;
    private javax.swing.JTextField p_price;
    private javax.swing.JTextField p_quantity;
    private javax.swing.JTextField s_emailadd;
    private javax.swing.JTextField s_name;
    private javax.swing.JTable stocktable;
    // End of variables declaration//GEN-END:variables

}
